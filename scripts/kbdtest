#!/usr/bin/python

import argparse, sys
from xml.etree import ElementTree as et
from palaso.sldr.ldml_keyboard import Keyboard

modifiermap = {
    'shift' : 'shift',
    'ctrl' : 'ctrl',
    'rctrl' : 'ctrlR',
    'alt' : 'alt',
    'altgr' : 'altR',
    'caps' : 'caps'
}

keymap = {
    'K_K' : 'C08',
    'K_X' : 'B02',
    'K_G' : 'C05',
    'K_C' : 'B03',
    'K_Q' : 'D01',
    'K_D' : 'C03',
    'K_Z' : 'B01',
    'K_T' : 'D05',
    'K_F' : 'C04',
    'K_N' : 'B06',
    'K_B' : 'B05',
    'K_P' : 'D10',
    'K_M' : 'B07',
    'K_Y' : 'D06',
    'K_R' : 'D04',
    'K_L' : 'C09',
    'K_V' : 'B04',
    'K_S' : 'C02',
    'K_H' : 'C06',
    'K_A' : 'C01',
    'K_I' : 'D08',
    'K_W' : 'D02',
    'K_U' : 'D07',
    'K_E' : 'D03',
    'K_O' : 'D09',
    'K_J' : 'C07',
    'K_SLASH' : 'B10',
    'K_PERIOD' : 'B09',
    'K_BKQUOTE' : 'E00',
    'K_0' : 'E10',
    'K_1' : 'E01',
    'K_2' : 'E02',
    'K_3' : 'E03',
    'K_4' : 'E04',
    'K_5' : 'E05',
    'K_6' : 'E06',
    'K_7' : 'E07',
    'K_8' : 'E08',
    'K_9' : 'E09',
    'K_SPACE' : 'A03',
    'K_COMMA' : 'B08',
    'K_QUOTE' : 'C11',
    'K_COLON' : 'C10',
    'K_LBRKT' : 'D11',
    'K_HYPHEN' : 'E11',
    'K_RBRKT' : 'D12',
    'K_BKSLASH' : 'B00',
    'K_EQUAL' : 'E12',
}

parser = argparse.ArgumentParser()
parser.add_argument('kbdfile',help='Keyboard LDML file')
parser.add_argument('infile', help='Input test .xml file')
parser.add_argument('--usvs', action="store_true", help="Output USVs in error messages")
args = parser.parse_args()

kbd = Keyboard(args.kbdfile)
doc = et.parse(args.infile)
errors = 0
for i, e in enumerate(doc.findall('.//event')):
    k = e.find('./key')
    if k is None : continue
    s = k.find('./shiftstate')
    modifiers = []
    if s is not None:
        for c in s:
            modifiers.append(modifiermap[c.tag])
    v = k.find("./vkey")
    if v is None: continue
    key = keymap[v.text.strip()]
    t = e.find('./postcontext/text')
    if t is None: continue
    test = t.text
    res = kbd.process(key, modifiers)
    if unicode(res) != test:
        print u"Failed test {}: {} should be {}".format(i+1, res, test)
        if args.usvs:
            print " ".join("U+{:04X}".format(ord(x)) for x in unicode(res)) + " should be " + \
                  " ".join("U+{:04X}".format(ord(x)) for x in test)
        errors += 1
sys.exit(errors)

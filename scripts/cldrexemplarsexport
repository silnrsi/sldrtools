from sldr.ldml import Ldml, iterate_files, draftratings
import argparse, os
from datetime import date

gendraft = draftratings.get('generated', 5)
currentDate = date.today()
currentYear = currentDate.year

parser = argparse.ArgumentParser()
parser.add_argument("indir",help="Root of SLDR file tree")
parser.add_argument("-o","--outpath",help="Directory to store generated ldml files")
parser.add_argument("-l","--ldml",help="ldml file identifier (without .xml)")
parser.add_argument("-a","--allowgenerated",action="store_true",help="Includes lines with the 'generated' draft attribute")
args = parser.parse_args()

if args.ldml:
    allfiles = [os.path.join(args.indir, args.ldml[0], args.ldml+".xml")]
else:
    allfiles = iterate_files(args.indir)

outdir = args.outpath

if not os.path.exists(outdir):
    os.makedirs(outdir, exist_ok=True)  #if local doesnt exist make it

exceptions = [
    "root.xml",
    "test.xml",
    "avu_Latn_SD.xml",
    "ku_Arab_TR",
    "lwo_Latn_ZA"
]

for f in allfiles:
    l = Ldml(f)
    fname = os.path.splitext(os.path.basename(f))[0]+".xml"
    silident = l.root.find(".//identity/special/sil:identity", {v:k for k,v in l.namespaces.items()})
    if fname in exceptions:
        ("skipped " + fname + " because it is listed in exceptions")
        continue
    if silident is None or silident.get("source", "") == "cldr" or silident.get("source", "") =="cldrseed":
        # source is cldr, skip
        print("skipped " + fname + " because from cldr")
        continue
    if len(l.root) == 1 and l.root[0].tag == "identity":
        ("skipped " + fname + " because it only contains id element")
        #only an id block, skip
        continue

    identity = l.root.find(".//identity")
    specialident = l.root.find(".//identity/special")
    generated = l.root.find(".//identity/generation")
    version = l.root.find(".//identity/version")
    variant = l.root.find(".//identity/variant")
    if variant is not None:
        # if it's a variant, skip. this may change later
        ("skipped " + fname + " because variant")
        continue
    for ident in identity:
        try:
            ident.attrib.pop("draft")
        except:
            pass
    if specialident is not None:
        identity.remove(specialident)
    if generated is not None:
        identity.remove(generated)
    if version is not None:
        # identity.remove(version)    # if you want to remove version
        version.set("number", "$Revision$")

    layout = l.find(".//layout")

    characters = l.root.find(".//characters")
    if characters is None:
        ("skipped " + fname + " because it has no character exemplars")
        continue
    specialchar = l.root.find(".//characters/special")
    if specialchar is not None:
        characters.remove(specialchar)
    chElems = l.root.findall('characters/exemplarCharacters')
    for chEl in chElems:
        exemType = chEl.get('type')
        exemAlt = chEl.get('alt')
        exemDraft = l.get_draft(chEl)   # numbers rep drafts, need to check which is which. Use this indtead of "get(draft) bc it inherits draft from file as a whole"
        if exemAlt is not None:
            if exemAlt == "proposed-dbl":
                characters.remove(chEl)
                continue
        if chEl.text == '[]':
            characters.remove(chEl)
            continue
        if not args.allowgenerated:
            if exemDraft >= gendraft:
                characters.remove(chEl)
                continue
        l.change_draft(chEl, "provisional")     #change to "provisional" if needed
        # this should just leave us with the non-generated (unless otherwise stated) main, aux, index, numbers, and punctuation exemplars
        # unfortunately this doesn't seem to even recognize the lines with proposed-dbl in them, so that's handled later using write
    parseLenients = l.root.findall('characters/parseLenients')
    for pL in parseLenients:
        characters.remove(pL)
    newCharacters = characters.findall('exemplarCharacters')
    if len(newCharacters) == 0:
        ("skipped " + fname + " it has no non-generated character exemplars")
        continue
    if len(newCharacters) == 1:
        if newCharacters[0].get('type') == 'auxiliary':
            ("skipped " + fname + " it has no non-generated character exemplars")
            continue

    finalElements = [identity, layout, characters]

    for e in l.root:
        if e not in finalElements:
            # remove all other elements except for the ones we are keeping (and modified above)
            # for some reason this doesn't get rid of several things, so I have extra stuff that removes those things below >:P
            l.root.remove(e)
    
    rootspecial = l.root.find("special")
    collations = l.root.find("collations")
    dates = l.root.find("dates")
    references = l.root.find("references")
    numbers = l.root.find("numbers")
    if rootspecial is not None:
        l.root.remove(rootspecial)
    if collations is not None:
        l.root.remove(collations)
    if dates is not None:
        l.root.remove(dates)
    if references is not None:
        l.root.remove(references)
    if numbers is not None:
        l.root.remove(numbers)

    # now write it to file in the local folder

    outputName = os.path.join(outdir, fname)
    l.normalise()
    l.save_as(outputName)

    # add doctype, remove the proposed-dbl stuff since apparently python thinks its invisible, and do other tweaks by manually writing to the file

    doctype = '<!DOCTYPE ldml SYSTEM "../../common/dtd/ldml.dtd">\n<!-- Copyright Â© 1991-{} Unicode, Inc.\nFor terms of use, see http://www.unicode.org/copyright.html\nSPDX-License-Identifier: Unicode-3.0\nCLDR data files are interpreted according to the LDML specification (http://unicode.org/reports/tr35/)\n-->\n'.format(currentYear)
    # doctype = '<!DOCTYPE ldml SYSTEM "../../common/dtd/ldml.dtd">\n'  # swap the comment with the line above if we decide not to add the copyright ourselves

    with open(outputName, 'r+', encoding="utf8") as f:
        lines = f.readlines()
        newlines = [x for x in lines if "<!-- Please enter language data in the fields below.  All data should be entered in English -->" not in x]
        newlines[1] = '<ldml>\n'
        newlines.insert(1,doctype)  
        newlines2 = [x for x in newlines if 'proposed-dbl' not in x]    # removes any lines that have the term 'proposed-dbl' in them
        newlines3 = [x for x in newlines2 if '<!-- name.en' not in x]   # there's almost certainly a nicer way of handling the multiple lines that need removing but for now this at least WORKS
        newlines4 = [x for x in newlines3 if "<!--  Enter the orientation attributes  -->" not in x]
        f.truncate(0)         
        f.seek(0)             
        f.writelines(newlines4)   

    print("processed " + outputName)

        

        
    
    

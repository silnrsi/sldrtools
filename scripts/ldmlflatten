#!/usr/bin/python3

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

import os, sys, codecs, subprocess

from palaso.sldr.ldml_merge import LdmlMerge, flattenlocale
from argparse import ArgumentParser
from multiprocessing import Pool
from xml.etree.ElementTree import ElementTree, Element, SubElement

parser = ArgumentParser()
parser.add_argument('-o','--outdir', help='Directory to store results in')
parser.add_argument('-a','--alphadir',action='store_true',help='Store in subdirs by first char')
parser.add_argument('-i','--indir',action='append', required=True, help='Input directory to search for ldml files')
parser.add_argument('-l','--locale',action='append', help='Locale to flatten (if not specified, then all)')
parser.add_argument('-r','--reverse',action='store_true', help='Unflatten rather than flatten')
parser.add_argument('-c','--copy',action='store_true', help='Unflatten rather than flatten')
parser.add_argument('-s','--single',action='store_true', help='Turn off multiprocessing')
parser.add_argument('-A','--antialias',action='store_true', help='Remove aliases')
parser.add_argument('-t','--topns',action='store_true',help='Outputs namespace declarations at top of file instead of as low as possible')
parser.add_argument('--revid',help='Insert revid into identity of each output file')
parser.add_argument('-g','--git',action='store_true',help='get revid from last change to file')
parser.add_argument('--skipstubs',action='store_true',help="Don't store files with only an identity block")
parser.add_argument("--debug",type=int,default=0,help="1 = list all locales, 2 = list output filenames")
args = parser.parse_args()

if not args.locale or not len(args.locale) :
    alllocales = set()
    for d in args.indir :
        for l in os.listdir(d) :
            if l.endswith('.xml') :
                alllocales.add(l[:-4])
            elif os.path.isdir(os.path.join(d, l)) :
                for t in os.listdir(os.path.join(d, l)) :
                    if t.endswith('.xml') :
                        alllocales.add(t[:-4])
    args.locale = sorted(alllocales)

action = 'f'
if args.reverse :
    action = 'r'
elif args.copy :
    action = 'c'
    
def doit(l) :
    if args.single :
        try:
            curr = flattenlocale(l, dirs=args.indir, rev=action,
                                 skipstubs=args.skipstubs, flattencollation=True,
                                 resolveAlias=args.antialias)
        except Exception as e:
            print("Failed in " + l)
            raise e
            return (False, l)
    else :
        try :
            curr = flattenlocale(l, dirs=args.indir, rev=action,
                                 skipstubs=args.skipstubs, resolveAlias=args.antialias)
        except Exception as e :
            print(e)
            return (False, l, str(e))
    if args.debug & 4:
        print(l + (" Failed" if curr is None else ""))
    if curr is not None :
        #curr.normalise()
        if args.revid :
            curr.add_silidentity(revid = args.revid)
        elif args.git :
            curr.add_silidentity(revid = dogit(curr))
        if args.alphadir :
            outf = os.path.join(args.outdir, l[0].lower(), l + '.xml')
        else :
            outf = os.path.join(args.outdir, l + '.xml')
        if not os.path.exists(os.path.dirname(outf)) :
            os.makedirs(os.path.dirname(outf))
        curr.normalise()
        if int(args.debug) & 2:
            print(outf)
        outfh = codecs.open(outf, "w", encoding="utf-8")
        curr.serialize_xml(outfh.write, topns = args.topns)
        outfh.close()
        return (True, l, "")
    return (False, l, "")

def dogit(l) :
    #b = os.path.commonprefix(os.path.abspath(ldml.file), os.path.abspaht(basedir)
    #r = os.path.relpath(os.path.abspath(ldml.file), start = b)
    #p = os.path.join(os.path.abspath(basedir), r)
    cmd = ['git', 'log', '-n', '1', '--pretty=format:%H%n%ci', l.fname]
    clog = subprocess.check_output(cmd).decode("utf-8")
    (rev, date) = clog.split("\n")
    return rev

if args.debug & 1:
    print(args.locale)

if not args.single :
    pool = Pool()
    results = list(pool.map_async(doit, args.locale).get())
    pool.close()
    pool.join()
else :
    results = [doit(l) for l in args.locale]
for r in [x for x in results if not x[0]]:
    print("Error in "+r[1] + " problem: " + r[2])


#!/usr/bin/python

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

from palaso.sldr.ldml import Ldml, flattenlocale, etwrite
import os, sys, codecs
from argparse import ArgumentParser
from multiprocessing import Pool
from xml.etree.ElementTree import ElementTree, Element, SubElement, parse

parser = ArgumentParser()
parser.add_argument('-o','--outdir', help='Directory to store results in')
parser.add_argument('-i','--indir',action='append', required=True, help='Input directory to search for ldml files')
parser.add_argument('-l','--locale',action='append', help='Locale to flatten (if not specified, then all)')
parser.add_argument('-s','--single',action='store_true', help='Turn off multiprocessing')
parser.add_argument('--iso',help="iso639 database for fallback language naming (/usr/share/xml/iso-codes/iso_639_3.xml)")
parser.add_argument('--debug', action='store_true')
args = parser.parse_args()

if not args.locale or not len(args.locale) :
    alllocales = set()
    for d in args.indir :
        for l in os.listdir(d) :
            if l.endswith('.xml') :
                alllocales.add(os.path.join(d, l))
    args.locale = list(alllocales)
    args.locale.sort()
if args.debug : print args.locale

silns = '{urn://www.sil.org/ldml/0.1}'

regionmap = {
    "Benin" : "BJ",
    "Bolivia" : "BO",
    "Brazil" : "BR",
    "Burkina Faso" : "BF",
    "Cameroon" : "CM",
    "Cape Verde Islands" : "CV",
    "Central African Republic" : "CF",
    "Chad" : "TD",
    "Congo" : "CG",
    "Democratic Republic of Congo" : "CD",
    "Equatorial Guinea" : "GQ",
    "Eritrea" : "ER",
    "Ethiopia" : "ET",
    "Ghana" : "GH",
    "Guinea" : "GW",
    "Iran" : "IR",
    "Kenya" : "KE",
    "Liberia" : "LR",
    "Malaysia" : "MY",
    "Mali" : "ML",
    "Niger" : "NE",
    "Nigeria" : "NG",
    "Pakistan" : "PK",
    "Papua New Guinea" : "PG",
    "Senegal" : "SN",
    "Sierra Leone" : "SL",
    "Sudan" : "SD",
    "Togo" : "TG",
    "Uganda" : "UG",
    "Viet Nam" : "VN"
}

langmap = {}
for d in args.indir :
    p = os.path.join(d, 'en.xml')
    if os.path.exists(p) :
        en = Ldml(p)
        if en is not None :
            for i in en.root.findall('localeDisplayNames/languages/language') :
                langmap[i.get('type')] = i.text

if args.iso :
    with open(args.iso) as f :
        e = parse(f)
        for i in e.findall('iso_639_3_entry') :
            code = i.get('id')
            if code not in langmap :
                langmap[code] = i.get('reference_name')

def add_silidentity(ldml) :
    ldml.add_namespace('sil', silns[1:-1])
    identity = ldml.root.find('identity')
    if identity is None :
        identity = SubElement(ldml.root, 'identity')
    silident = identity.find('special/'+silns+'identity')
    if silident is None :
        temp = SubElement(identity, 'special')
        silident = SubElement(temp, silns+'identity')
    return silident

def doit(l) :
    try :
        curr = Ldml(l)
    except Exception, e :
        print "Failed in " + l.encode('utf-8')
        raise e
    if curr is None : 
        print "Reading resulted in nothing for " + l.encode('utf-8')
        return
    elif args.debug :
        print "Processing " + l.encode('utf-8')

    # handle demoting orientation too layout/orientation
    orient = curr.root.find('orientation')
    if orient is not None :
        curr.root.remove(orient)
        c = orient.find('characterOrder')
        if c is not None and c.text == "left-to-right" :
            orient.remove(c)
        c = orient.find('lineOrder')
        if c is not None and c.text == "top-to-bottom" : 
            orient.remove(c)
        if len(orient) > 0 :
            layout = curr.root.find('layout')
            if layout is None :
                layout = SubElement(curr.root, 'layout')
            layout.append(orient)
    status = curr.root.find('status')
    if status is not None :
        val = status.get('value', None)
        curr.root.remove(status)
        if val == 'HOLD' :
            silident = add_silidentity(curr)
            silident.set('usage', 'unused')
        if val == 'Draft' or val == 'HOLD' :
            for e in curr.root.findall('characters/exemplarCharacters') :
                if e.get('draft', None) is None :
                    e.set('draft', 'unconfirmed')
    region = curr.root.find('regionInfo/region')
    if region is not None :
        r = region.get('type','')
        if r in regionmap :
            silident = add_silidentity(curr)
            silident.set('defaultRegion', regionmap[r])
    region = curr.root.find('regionInfo')
    if region is not None :
        curr.root.remove(region)
    for i in ('identity/language', 'identity/script') :
        inode = curr.root.find(i)
        if inode is not None :
            inode.attrib.pop('name', None)
            inode.comments = []
            val = inode.get('code', None)
            if val is not None :
                inode.set('type', inode.attrib.pop('code', None))
    for e in curr.root.findall('characters/exemplarCharacters') :
        e.comments = []
    lang = curr.root.find('identity/language')
    if lang is not None :
        if not hasattr(lang, 'comments') or len(lang.comments) == 0 :
            i = lang.get('type')
            lang.comments = [u' name.en({0})="{1}" '.format(i, langmap.get(i, 'Unknown'))]
    curr.normalise()
    outfh = codecs.open(os.path.join(args.outdir, os.path.basename(l)), "w", encoding="utf-8")
    curr.serialize_xml(outfh.write)
    outfh.close()

if not args.single :
    pool = Pool()
    res = pool.map_async(doit, args.locale)
    pool.close()
    pool.join()
else :
    for l in args.locale :
        doit(l)

#!/usr/bin/env python3

from langtag import lookup  # , langtag
from sldr.ldml import Ldml, iterate_files
import cssutils
import json
import csv
import os
import os.path
import urllib.request
import argparse

script2suggestions = dict()
css_scripts = dict()
css2suggestions = dict()
css2features = dict()
css_locales = set()
tuned_fonts = json.load(open('tuned_fonts.json'))
font2urls = dict()
url_cache = dict()


def main():
    parser = argparse.ArgumentParser(description='Populate font information to LDML files')
    parser.add_argument('datafile', help='CSV file export from Google Sheet document Script2Font')
    parser.add_argument('--fontname', help='Name of font to add to LDML file')
    parser.add_argument('--ldml', help='LDML file')
    parser.add_argument('--sldr', help='root of SLDR tree to write into')
    parser.add_argument('--stylesheet', help='CSS stylesheet with user settable font features')
    parser.add_argument('--version', action='version', version='%(prog)s: 0.2')
    args = parser.parse_args()

    preferred_fonts = list()

    read_font_data(args.datafile)
    if args.stylesheet:
        read_feature_data(args.stylesheet)
        read_url_data()
        report_css_information(args.sldr)
    if args.sldr:
        write_all_font_data(args.sldr)
    if args.fontname:
        preferred_fonts.append(args.fontname)
    if args.ldml:
        locale = filename2locale(args.ldml)
        write_font_data(locale, args.ldml, preferred_fonts)


def read_font_data(data_file_name):
    """Read CSV data file"""
    font_sources = ('WSTech primary', 'NLCI', 'Other', 'Noto Sans', 'Noto Serif', 'WSTech secondary')
    with open(data_file_name, 'r', newline='') as data_file:
        reader = csv.DictReader(data_file)
        for row in reader:
            # Construct font tag
            script = row['Code']
            ft = script
            for region in row['Region'].split(', '):
                if region != '':
                    ft = script + '-' + region

                # Assemble list of fonts for the font tag
                fonts = list()
                for font_source in font_sources:
                    preferred_fonts = row[font_source]
                    if preferred_fonts:
                        for preferred_font in preferred_fonts.split(', '):
                            fonts.append(preferred_font)
                if len(fonts) > 0:
                    script2suggestions[ft] = fonts


def read_feature_data(stylesheet_file_name):
    """Read CSS stylesheet for user font features"""

    # Microsoft fonts are not OFL so are not added to the SLDR
    # Other fonts are virtual fonts (such as serif) and also do not need to be in the SLDR
    # Some fonts are specified for a script they are not designed to support
    ignore_fonts = json.load(open('ignore_fonts.json'))

    fix_locale = json.load(open('fix_locale.json'))
    replace_font = json.load(open('replace_font.json'))

    sheet = cssutils.parseFile(stylesheet_file_name)
    for rule in sheet:
        if rule.type == rule.STYLE_RULE:
            # fixes for some locales

            # get locale and possibly correct it
            locale = rule.selectorText[len(':lang('):-1]
            locale = fix_locale.get(locale, locale)
            script = ''
            full_tag = ''

            # find full locale
            try:
                ts = lookup(locale, matchRegions=True, use639=True)
                script = ts.script
                full_tag = ts.full
                css_locales.add(full_tag)
            except KeyError:
                pass

            # record the script for each locale
            css_scripts[full_tag] = script

            # find fonts and maybe features
            message = locale + ': '
            features = set()
            for prop in rule.style:
                if prop.name == 'font-family':
                    message += prop.name + prop.value
                    fonts = list()
                    preferred_fonts = prop.value.replace('"', '')
                    for preferred_font in preferred_fonts.split(', '):
                        # some fonts have been superseded by new (upgraded) fonts
                        upgraded_font = replace_font.get(preferred_font, preferred_font)

                        # some fonts imply features
                        if upgraded_font in tuned_fonts:
                            features.update(set(tuned_fonts[upgraded_font]))

                        # fonts that do not need to be in the SLDR or were incorrect in the CSS file
                        if preferred_font in ignore_fonts:
                            continue

                        fonts.append(upgraded_font)
                    if len(fonts) > 0:
                        css2suggestions[full_tag] = fonts
                if prop.name == 'font-feature-settings':
                    message += prop.name + prop.value
                    specified_features = prop.value
                    for css_specified_feature in specified_features.split(', '):
                        ldml_specified_feature = css_specified_feature.replace(' ', '=').replace('"', '')
                        features.update([ldml_specified_feature])

            # features can come from being implied by a font name
            # or listed in the CSS file
            if len(features) > 0:
                css2features[full_tag] = features
            # print(message)


def find_fonts_from_csv(locale):
    """Return a list of preferred fonts from the CSV file"""
    # Find script and possibly region
    region = None
    try:
        ts = lookup(locale, matchRegions=True, use639=True)
        script = ts.script
        region = ts.region
    except KeyError:
        print(f'Cannot find locale {locale}, using fallback')
        return ['Charis SIL']

    # Find font from table
    ft = script
    if region:
        ft = script + '-' + region
    if ft in script2suggestions:
        return script2suggestions[ft]
    elif script in script2suggestions:
        return script2suggestions[script]
    # used to be Charis SIL if no match was found, but an empty list gives better results
    return ['']


def find_fonts_from_css(locale):
    """Return a list of preferred fonts from the CSS file"""
    if locale in css2suggestions:
        return css2suggestions[locale]
    else:
        return []


def read_url_data():
    """Read config file for some fontname to URL mappings."""
    font_urls = json.load(open('font_urls.json'))
    font2urls.update(font_urls)


def find_url_from_fontname(fontname):
    """Return tested URL where the font can be found."""
    # If a font already has a valid URL determined,
    # return that so the URL does not need to be tested again.
    if fontname in url_cache:
        print(f'font: {fontname} is cached as URL: {url_cache[fontname]}')
        return url_cache[fontname]

    # This script does not find all valid URLs, so if a URL is listed
    # in the font name to URL mapping, consider it correct.
    if fontname in font2urls:
        url = font2urls[fontname]
        if url.startswith('http'):
            print(f'font: {fontname} URL+ given {url}')
            url_cache[fontname] = url
            return url

    # Otherwise, test constructed URLs to see if they are valid.
    urls = build_url_from_fontname(fontname)
    if len(urls) == 0:
        return ''
    for url in urls:
        valid = True
        try:
            print(f'trying URL: {url}')
            request = urllib.request.Request(url, headers={'User-Agent': 'Mozilla/5.0'})
            urllib.request.urlopen(request)
        except urllib.error.HTTPError:
            valid = False

        message = 'NOT'
        if valid:
            message = ''
            print(f'font: {fontname} URL+ {message}at {url}')
            url_cache[fontname] = url
            return url
        print(f'font: {fontname} URL+ {message}at {url}')

    print(f'font: {fontname} URL+ INVALID')
    return ''


def build_url_from_fontname(fontname):
    """Construct URL(s) where the font might be found."""
    pathname = font2urls.get(fontname, fontname)
    pathname = pathname.replace(' ', '')
    if pathname == '':
        return list()

    # Noto fonts
    googlefonts = 'https://github.com/googlefonts/'
    noto_repo = f'{googlefonts}noto-fonts/raw/main/'
    noto_cjk_repo = f'{googlefonts}noto-cjk/raw/main/'
    if pathname.startswith('Noto'):
        url = f'{noto_repo}hinted/ttf/{pathname}/{pathname}-Regular.ttf'
        if pathname.endswith(('JP', 'KR', 'SC', 'TC')):
            style = fontname.split()[1]
            url = f'{noto_cjk_repo}{style}/{pathname}-Regular.otf'
        elif pathname == 'NotoSansTibetan':
            url = f'{noto_repo}archive/hinted/{pathname}/{pathname}-Regular.ttf'
        return [url]

    # Default to WIRL records
    urls = list()
    for file_type in ('&type=ttf', ''):
        for style in ('Reg', ''):
            url = f'https://wirl.api.sil.org/{pathname}{style}{file_type}'
            urls.append(url)
    return urls


def filename2locale(filepath):
    """Convert a path to a LDML file to a locale"""
    locale = os.path.splitext(os.path.basename(filepath))[0].replace('_', '-')
    return locale


def find_ldml_files(sldrtree):
    """Find LDML files in the SLDR"""
    for filepath in iterate_files(sldrtree):
        # Find preferred font
        xml_locale = filename2locale(filepath)
        yield xml_locale, filepath


def process_font(fonts, all_fonts, label=''):
    """Add preferred fonts to a list to add to the SLDR"""
    message = ''
    if len(fonts) > 0:
        message += f' {label}: '
        for font in fonts:
            message += '-' + font
            all_fonts.append(font)
    return message


def features_set2str(features_set):
    """Convert a set of features into a string"""
    features_list = sorted(features_set)
    features = ' '.join(features_list)
    return features


def report_css_information(sldrtree):
    """Report on features and missing locales"""

    full_tag = ''

    # Find locales specified in CSS that are not in the SLDR
    xml_locales = set()
    for xml_locale, filepath in find_ldml_files(sldrtree):
        try:
            ts = lookup(xml_locale, matchRegions=True, use639=True)
            full_tag = ts.full
            xml_locales.add(full_tag)
        except KeyError:
            pass

    for locale in css_locales - xml_locales:
        pass
        # print(f'{locale}: only in css')
    # No need to add the three (now one) locales found that are only in the CSS file
    # to LDML files (with just font info)
    # since their font is the same as the fallback script font.
    # Except that two of the languages (in a different script than the default)
    # have features specified, with a font for a different script than the default.
    # These two additional locales are already in the SLDR.

    # Find locales specified in CSS that have font features
    for locale in css2features:
        message = ''
        for feature in sorted(css2features[locale]):
            message += '-' + feature + ': '
        preferred_font_count = 0
        if locale in css2suggestions:
            for preferred_font in css2suggestions[locale]:
                message += '-' + preferred_font
                preferred_font_count += 1
        else:
            message += '-no font'
        script = css_scripts[locale]
        if script == 'Latn' and preferred_font_count == 1 and 'Charis SIL' in css2suggestions[locale]:
            pass
        else:
            message += '-review'
        print(f'{locale} in {script}::: {message}')


def write_all_font_data(sldrtree):
    """Write preferred font information to SLDR"""

    # Update SLDR with better font information
    for xml_locale, filepath in find_ldml_files(sldrtree):
        preferred_fonts = list()
        write_font_data(xml_locale, filepath, preferred_fonts)


def write_font_data(xml_locale, filepath, preferred_fonts):
    """Write preferred font to a LDML file"""

    full_tag = ''

    # Determine what URLs are needed for fonts
    all_preferred_fonts = set()

    if True:
        try:
            ts = lookup(xml_locale, matchRegions=True, use639=True)
            full_tag = ts.full
        except KeyError:
            print(f'Cannot find locale {full_tag} from {xml_locale} for writing')
            return

        # Find preferred fonts (which might be specified in the CSS file)
        preferred_fonts_from_csv = find_fonts_from_csv(full_tag)
        preferred_fonts_from_css = find_fonts_from_css(full_tag)

        only_csv = sorted(set(preferred_fonts_from_csv) - set(preferred_fonts_from_css))
        only_css = sorted(set(preferred_fonts_from_css) - set(preferred_fonts_from_csv))

        common = set(preferred_fonts_from_csv) & set(preferred_fonts_from_css)

        message = ''
        # fonts
        message += process_font(common, preferred_fonts, 'common')
        message += process_font(only_csv, preferred_fonts, 'only in csv')
        message += process_font(only_css, preferred_fonts, 'only in css')
        all_preferred_fonts.update(preferred_fonts)

        # features
        full_tag_features_set = set()
        if full_tag in css2features:
            full_tag_features_set = css2features[full_tag]
        if 'Annapurna SIL Nepal' in preferred_fonts:
            font_features_set = set(tuned_fonts['Annapurna SIL Nepal'])
            full_tag_features_set.update(font_features_set)
        full_tag_features = ''
        if len(full_tag_features_set) > 0:
            full_tag_features = features_set2str(full_tag_features_set)
            message += ' ' + full_tag_features
        for preferred_font in preferred_fonts:
            if ' SIL ' in preferred_font:
                message += ' tuned'
        print(f'{xml_locale}->{full_tag}:{filepath}:{message}')

        # Write preferred font to LDML file
        default = 'default'
        for preferred_font in preferred_fonts:
            ldml = Ldml(filepath)
            if preferred_font == '':
                continue
            resource_path = f'special/sil:external-resources/sil:font[@name="{preferred_font}"]'
            resource = ldml.ensure_path(resource_path)[0]

            # handle features
            ldml_features = ''
            if preferred_font.startswith('Noto'):
                ldml_features = ''
            elif preferred_font in tuned_fonts:
                # remove the features (if any) that are implied by the font name
                font_features_set = set(tuned_fonts[preferred_font])
                ldml_features_set = full_tag_features_set - font_features_set
                ldml_features = features_set2str(ldml_features_set)
            else:
                ldml_features = full_tag_features
            if ldml_features != '':
                resource.set('features', ldml_features)

            if default != '':
                resource.set('types', default)
            if preferred_font.startswith('Noto Sans'):
                if preferred_font == 'Noto Sans Coptic':
                    pass
                else:
                    resource.set('types', 'ui')
            url = find_url_from_fontname(preferred_font)
            if url != '':
                resource_path += '/sil:url'
            resource = ldml.ensure_path(resource_path)[0]
            if url != '':
                resource.text = url
            ldml.save_as(filepath, topns=True)

            # only the first font is the default font
            default = ''


if __name__ == '__main__':
    main()

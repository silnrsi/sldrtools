#!/usr/bin/env python3

import argparse, os
import json, csv
from sldr.ldml import Ldml
from langtag import lookup
import requests

parser = argparse.ArgumentParser()
parser.add_argument("-f", "--fpath",help="Relative path to json file downloaded from https://api.keyman.com/cloud/4.0/keyboards/?languageidtype=bcp47. Otherwise, the API will be accessed via url")
parser.add_argument("-o","--output",help="Generate report here")
parser.add_argument("-q","--quiet",action="store_true",help="Reduced screen output")
parser.add_argument("-s","--sldr",help="root of SLDR tree to write into")
parser.add_argument("-n","--dryrun",action="store_true",help="Don't write to any sldr files")
args = parser.parse_args()

if args.fpath:
    #relative path for emily's storage system is "../../../SourceFiles/keyman2025/keyboards.json"
    dirname = os.path.dirname(__file__)
    keymanpath = os.path.realpath(os.path.join(dirname, args.fpath))
    alldat = json.load(open(keymanpath))
else:
    apiurl = "https://api.keyman.com/cloud/4.0/keyboards/?languageidtype=bcp47"
    response = requests.get(apiurl)
    alldat = json.loads(response.content)
dat = ""
id = ""
results = {}
for a in alldat["keyboard"]:
    #this is now like we opened the file system and found all the different instances of keyboard info. every instance of "a" is an instance of keyboard info now
    dat = a
    id = a["id"]
    for k in dat['languages']:
        langtag = k["id"]
        entry = {'langtag': langtag, 'id': id}
        results.setdefault(langtag, []).append(entry)
        for s in ('font', 'oskfont'):
            if s in k.keys():
                entry[s+'family'] = k[s]['family']
                entry[s+'source'] = k[s]['source'][0]
if args.output:
    with open(args.output, "w") as outf:
        fieldnames = ['langtag', 'fontfamily', 'fontsource',
                    'oskfamily', 'osksource']
        writer = csv.DictWriter(outf, fieldnames = fieldnames)
        writer.writeheader()
        for k, v in sorted(results.items()):
            writer.writerows(v)

badtags = {
    # langtags found in the data that are, for some reason, not going to work right without being tweaked slightly
    # alt method would be to do it based on keyboard?
    # there are others, but these are the ones with easy fixes for now. 
    "yor":"yo",
    "kau":"kr",
    "ibo":"ig",
    "hau":"ha",
}

if args.sldr:
    for lang, info in sorted(results.items()):
        try:
            lt = lookup(lang)
        except KeyError:
            if lang in badtags.keys():
                retrytag = badtags[lang]
                try: 
                    lt = lookup(retrytag)
                except KeyError:
                    print("Can't find {} with {}".format(lang, info[0]['id']))
                    continue
            else: 
                print("Can't find {} with {}".format(lang, info[0]['id']))
                continue
        fname = lt.asSldr()
        fpath = os.path.join(args.sldr, fname)
        if not os.path.exists(fpath):
            fpath = os.path.join(args.sldr, fname[0].lower(), fname)
            if not os.path.exists(fpath):
                if not args.quiet:
                    print("Failed: {}".format(fname))
                continue
        if args.dryrun:
            continue
        try:
            l = Ldml(fpath)
        except BaseException as e:
            print("Error in {}".format(fpath))
            raise e
        if not args.quiet:
            print(fpath)
        for v in info:
            basename = v['id']
            res = l.ensure_path('special/sil:external-resources/sil:kbd[@id="{}"][@type="kmp"]/sil:url'\
                                .format(basename), draft="generated")[0]
            res.text = "https://keyman.com/go/keyboard/{}/download/kmp".format(basename)
        l.save_as(fpath)
        
            
        


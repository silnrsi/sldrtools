#!/usr/bin/python

import argparse, os, re, datetime, sys, csv
from palaso.sldr.ldml import Ldml, getldml
from langtag import langtag, lookup
from xml.etree import ElementTree as et
from multiprocessing import Pool

try:
    cmp
except NameError:
    def cmp(a, b):
        return -1 if a < b else (1 if a > b else 0)

def compare_now(s):
    n = datetime.date.today()
    t = [int(x) for x in s.split("-")]
    return cmp(n.year, t[0]) or cmp(n.month, t[1]) or cmp(n.day, t[2])

def getxpaths(l, e=None):
    if e is None:
        e = l.root
    res = []
    for c in e:
        res.extend(getxpaths(l, c))
    if e.text != "":
        return [l.as_xpath(e, usedrafts=True)]
    else:
        return res

def asregex(l):
    if len(l) == 0:
        return ''
    elif len(l) == 1:
        return l
    else:
        return "("+"|".join(l)+")"

class CoverageLevel:
    def __init__(self, e):
        for k, v in e.attrib.items():
            if k != "value":
                setattr(self, k, v.replace("'", '"').replace('[','\\[').replace(']','\\]'))
        self.test = None

    def test_coverage(self, ltag, vars, info):
        def dovar(m):
            return vars.get(m.group(1), '')
        def doinfo(m):
            return info.get(m.group(1), '')
        work = {'inLanguage': ltag.lang, 'inScript': ltag.script, 'inTerritory': ltag.region, 'match': None}
        for k, v in work.items():
            if hasattr(self, k) or k == "match":
                c = getattr(self, k)
                ra = re.sub(r'%([a-zA-Z0-9_]+)', dovar, c)
                r = re.sub(r'\$\{(Target-[a-zA-Z]+)\}', doinfo, ra)
                if k == 'match':
                    self.test = re.compile(r+'$')
                elif not re.match(r+'$', v):
                    self.test = None
                    return False
        return True

    def test_xpath(self, xpath):
        return self.test.match(xpath) if self.test is not None else False

parser = argparse.ArgumentParser()
parser.add_argument('-i','--indir',action='append',help="Input directory to search for ldml files")
parser.add_argument('-o','--outfile',help="Write results here")
parser.add_argument('-l','--locale',action='append',help="Locale to give coverage of")
parser.add_argument('-s','--supplemental',help="CLDR supplemental directory")
parser.add_argument('-d','--debug',action='store_true',help="Debug output")
parser.add_argument('-S','--single',action='store_true',help='Run single processed')
parser.add_argument('--level',help="Only run for given level")
args = parser.parse_args()

if not args.locale or not len(args.locale) :
    alllocales = set()
    for d in args.indir :
        for l in os.listdir(d) :
            if l.endswith('.xml') :
                alllocales.add(l[:-4])
            elif os.path.isdir(os.path.join(d, l)) :
                for t in os.listdir(os.path.join(d, l)) :
                    if t.endswith('.xml') :
                        alllocales.add(t[:-4])
    args.locale = sorted(alllocales)

def locale_stats(loc, lt):
    info = {
        'Target-Language' : lt.lang,
        'Target-Scripts' : lt.script,
        'Target-Territories' : lt.region,
        'Target-Calendars': asregex(calendar_prefs.get(lt.region, '')),
        'Target-TimeZones': '',
        'Target-Currencies': currencies.get(lt.region, ''),
        'Target-Plurals': ''
    }
    l = getldml(loc, args.indir)
    if l is None:
        return ({}, False)
    s = l.find('.//sil:identity')
    iscldr = s.get('source', '') if s is not None else ""
    if len(l.root) < 2:
        return ({}, iscldr)
    xpaths = set(getxpaths(l))
    res = getstats(lt, xpaths, levels, vars, info)
    return (res, iscldr)

def getstats(lt, xpaths, levels, vars, info, skip=False):
    res = {}
    for m, cs in levels.items():
        if args.level and args.level != m:
            continue
        for c in cs:
            if (skip and c.test is None) or (not skip and not c.test_coverage(lt, vars, info)):
                continue
            for x in xpaths:
                if c.test_xpath(x):
                    if args.debug:
                        print("{}: {} ~ {}".format(m, x, c.match))
                    res[m] = res.get(m, 0) + 1
    return res

levelnames = ['core', 'posix', 'minimal', 'basic', 'moderate', 'modern']
vars = {}
calendar_prefs = {}
levels = {}
currencies = {}

if args.supplemental:
    s = et.parse(os.path.join(args.supplemental, "coverageLevels.xml"))
    for e in s.findall('.//coverageVariable'):
        vars[e.get('key')[1:]] = e.get('value').replace("++", "+").replace("\\x{22}", '"')
    for e in s.findall('.//coverageLevel'):
        val = e.get('value')
        if val not in levels:
            levels[val] = []
        levels[val].append(CoverageLevel(e))
    d = et.parse(os.path.join(args.supplemental, "supplementalData.xml"))
    for e in d.findall('.//calendarPreference'):
        cs = e.get('ordering').split(' ')
        for t in e.get('territories').split(' '):
            calendar_prefs[t] = cs
    for e in d.findall('.//currencyData/region'):
        r = e.get('iso3166')
        for c in e.findall('./currency'):
            if compare_now(c.get('from', "0000-00-00")) < 0:
                continue
            if compare_now(c.get('to', "9999-99-99")) > 0:
                continue
            currencies[r] = c.get('iso4217')
            break

reseng = locale_stats('en', lookup('en'))[0]

def doit(loc):
    if loc == 'qaz':
        lt = langtag("qaz-Latn-001")
    elif loc != "":
        lt = lookup(loc.replace("_", "-"), default="")
    else:
        lt = ""
    if lt == "":
        return (loc, {}, False)
    (res, iscldr) = locale_stats(loc, lt)
    return (loc, res, iscldr)

if not args.single:
    pool = Pool()
    results = pool.map_async(doit, args.locale).get()
else:
    results = []
    for l in args.locale:
        results.append(doit(l))

outfile = open(args.outfile, "w") if args.outfile else sys.stdout
outcsv = csv.writer(outfile)
outcsv.writerow(['langtag', 'source'] + levelnames)

for r in sorted(results, key=lambda x:(-sum(100. * x[1].get(k, 0)/reseng.get(k) for k in levelnames), x[0])):
    if len(r[1]):
        outcsv.writerow([r[0], r[2]] + ["{:.2f}".format(100. * r[1].get(k, 0) / reseng.get(k)) for k in levelnames])

if args.outfile:
    outfile.close()

